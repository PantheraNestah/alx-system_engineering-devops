## Designing a Simple Web Stack: A Single-Server Approach


```
+-----------------------------------------------------+
|                     User's Computer                 |
|      +-----------------------------------------+    |
|      |              Web Browser                |    |
|      +-----------------------------------------+    |
+----------------------|------------------------------+
                       | 1. User types www.foobar.com
                       |
+----------------------v------------------------------+
|                   The Internet                      |
|                                                     |
|  2. DNS Resolution: www.foobar.com -> 8.8.8.8       |
|                                                     |
+----------------------|------------------------------+
                       | 3. HTTP Request
                       |
+----------------------v------------------------------+
|                     Your Server (IP: 8.8.8.8)       |
|                                                     |
|  +-------------------+  +------------------------+  |
|  |    Web Server     |  |  Application Server    |  |
|  |      (Nginx)      |  |                        |  |
|  +--------|----------+  +-----------|------------+  |
|           | 4. Handles Request       | 5. Executes Code |
|           |                          |                |
|  +--------v----------+  +------------v-----------+  |
|  | Application Files |  |      Database          |  |
|  |   (Your Code)     |  |       (MySQL)          |  |
|  +-------------------+  +------------------------+  |
|           | 6. Returns Content to Web Server     |  |
|           |                                      |  |
|           +--------------------------------------+  |
|                                                     |
|  7. HTTP Response to User's Browser                 |
+-----------------------------------------------------+
```

### Understanding the Infrastructure Components

Let's break down the role of each component in this setup:

**What is a server?**
A server is a powerful computer, either physical or virtual, that provides data, services, or programs to other computers, known as clients, over a network. In our case, the server is the single machine that stores all the necessary files and software to run your website.

**What is the role of the domain name?**
A domain name, like `www.foobar.com`, is the human-friendly address for your website. It acts as a memorable identifier that users can type into their browser, saving them from having to remember a complex numerical IP address. It's a crucial part of your online identity and brand.

**What type of DNS record is `www` in `www.foobar.com`?**
The `www` in `www.foobar.com` is typically a **CNAME (Canonical Name) record** or an **A record**.
*   An **A record** directly maps a domain name to an IPv4 address.
*   A **CNAME record** acts as an alias, pointing one domain name to another. For instance, `www.foobar.com` could be a CNAME pointing to `foobar.com`. This is a common practice to ensure that both addresses lead to the same website.

**What is the role of the web server (Nginx)?**
The web server, in this case, Nginx, is the software that receives incoming HTTP requests from users' browsers. Its primary role is to serve static content like HTML pages, CSS stylesheets, and images directly to the user. For dynamic content, it acts as a reverse proxy, forwarding the request to the application server.

**What is the role of the application server?**
The application server is responsible for executing the application's business logic. It processes user requests that require more than just serving a static file. For example, if a user fills out a contact form or logs into an account, the application server processes this information, interacts with the database, and generates dynamic content to be sent back to the user.

**What is the role of the database (MySQL)?**
The database, here MySQL, is where all the website's dynamic data is stored and managed in an organized way. This includes user information, blog posts, product details, and any other information that needs to be persisted and can change over time. The application server queries the database to retrieve or update this information as needed.

**What is the server using to communicate with the computer of the user requesting the website?**
The server communicates with the user's computer using the **Hypertext Transfer Protocol (HTTP)** or its secure version, **HTTPS**. This communication follows a client-server model, where the user's web browser (the client) sends an HTTP request to the server, and the server sends back an HTTP response containing the requested webpage content.

### The Inherent Flaws of a Single-Server Infrastructure

While simple and cost-effective, this single-server setup has significant drawbacks:

*   **Single Point of Failure (SPOF):** If any component on the single server fails—be it the hardware, the web server software, the application server, or the database—the entire website goes down. There is no redundancy to take over in case of a failure.

*   **Downtime During Maintenance:** When you need to perform maintenance, such as deploying new code or applying security patches that require a server restart, your website will be unavailable to users. This can lead to a poor user experience and potential loss of business. Strategies like zero-downtime deployment, which involve more complex infrastructures, are not feasible with a single server.

*   **Inability to Scale with High Traffic:** A single server has finite resources (CPU, RAM, storage). As incoming traffic increases, the server can become overwhelmed, leading to slow performance or even crashing. This architecture cannot easily handle a surge in users. Scaling options are limited to "vertical scaling," which means adding more resources to the existing server, a solution that has its own physical and cost limitations.