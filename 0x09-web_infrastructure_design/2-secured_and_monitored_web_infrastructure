### Designing a Secured and Monitored Web Infrastructure

#### Whiteboard Design

Here is an updated design for `www.foobar.com` that includes firewalls, serves traffic over HTTPS, and integrates monitoring.

```
+-----------------------------------------------------+
|                     User's Computer                 |
+----------------------|------------------------------+
                       | 1. DNS Resolution: www.foobar.com -> 8.8.8.8 (Load Balancer IP)
                       |
+----------------------v------------------------------+
|                   The Internet                      |
+----------------------|------------------------------+
                       | 2. HTTPS Request (Encrypted)
                       |
+----------------------v------------------------------+
|                Firewall 1 (UFW/iptables)            |
|       (Allows traffic only on port 443)             |
+----------------------|------------------------------+
                       |
+----------------------v------------------------------+
|           Server 1: Load Balancer (HAproxy)         |
|         +----------------------------------+        |
|         |  - SSL Certificate Installed     |        |
|         |  - Terminates HTTPS              |        |
|         |  - Monitoring Client (Sumologic) |        |
|         +----------------------------------+        |
|             /                     \                 |
| 3. Unencrypted HTTP         3. Unencrypted HTTP     |
+------------|-----------------------|----------------+
             |                       |
+------------v-----------+ +---------v----------------+
|  Firewall 2            | |  Firewall 3              |
| (Allows port 80 from LB)| | (Allows port 80 from LB)|
+------------|-----------+ +---------|----------------+
             |                       |
+------------v-----------+ +---------v----------------+
|  Server 2: App/DB Primary | |  Server 3: App/DB Replica  |
| +--------------------+ | | +--------------------+   |
| | Web/App Server 1   | | | | Web/App Server 2   |   |
| +--------------------+ | | +--------------------+   |
| | DB Primary (MySQL) | | | | DB Replica (MySQL)   |   |
| +--------------------+ | | +--------------------+   |
| | Monitoring Client  | | | | Monitoring Client  |   |
| +--------------------+ | | +--------------------+   |
|          ^             | |          ^               |
|          |-------------+------------|---------------+--- Outbound to Monitoring Service
|                        | |                          |
+------------------------+ +--------------------------+
```

### Specifics of the Secured and Monitored Infrastructure

#### For every additional element, why are you adding it?

*   **3 Firewalls:** A firewall is added to each server to act as a security guard. It provides a critical, fundamental layer of security by controlling all incoming and outgoing network traffic based on a defined set of rules.
*   **1 SSL Certificate:** The SSL certificate is added to enable HTTPS. This is essential for security and user trust. It encrypts the data transferred between the user's browser and your website, protecting it from being intercepted or read by attackers.
*   **3 Monitoring Clients:** A monitoring client (or agent) is installed on each of the three servers. You cannot manage or fix what you cannot see. These clients collect vital health and performance data, giving you the visibility needed to detect problems, analyze performance, and ensure the system is running smoothly.

#### What are firewalls for?

Firewalls are network security systems that enforce a set of rules to control traffic. Their primary purpose is to create a barrier between a trusted internal network (your servers) and an untrusted external network (the public internet). They work by inspecting data packets and blocking any that do not conform to the configured rules, such as traffic attempting to connect on unauthorized ports, thus preventing many common types of cyberattacks.

#### Why is the traffic served over HTTPS?

Traffic is served over HTTPS (Hypertext Transfer Protocol Secure) for three main reasons:
1.  **Confidentiality (Encryption):** HTTPS encrypts the data exchanged between the user and the server. This prevents attackers from eavesdropping on the connection and stealing sensitive information like passwords, personal details, and credit card numbers.
2.  **Integrity:** It ensures that the data has not been tampered with during transit. If an attacker tries to alter the content of a webpage, the encryption mechanism will detect it, and the browser will warn the user.
3.  **Authentication:** The SSL certificate proves that the website the user is connected to is genuinely `www.foobar.com` and not a malicious imposter site. This builds user trust and protects against phishing attacks.

#### What is monitoring used for?

Monitoring is used to gain insight into the state and performance of your infrastructure. Its key functions are:
*   **Failure Detection:** To alert you immediately when a server, service, or application fails, so you can begin remediation.
*   **Performance Analysis:** To track key metrics like CPU usage, memory consumption, and application response times to identify bottlenecks.
*   **Capacity Planning:** By observing trends over time, you can predict when you will need to add more resources (like servers or disk space) before performance degrades.
*   **Security:** To detect unusual activity, such as a sudden spike in traffic from a single IP address, which could indicate a denial-of-service attack.

#### How the monitoring tool is collecting data

The monitoring tool collects data via a software agent (the "monitoring client") installed on each server. This agent runs in the background and gathers metrics from various sources:
*   **System Metrics:** It reads data directly from the operating system about CPU usage, RAM, disk space, and network I/O.
*   **Log Files:** It can be configured to read, parse, and forward log files generated by the web server (Nginx), the application, and the database (MySQL).
*   **Service Checks:** It can actively check if key services (like the Nginx process) are running.
The agent then sends this collected data over the network to a centralized monitoring service (like Sumologic, Datadog, or Prometheus) for storage, visualization, and alerting.

#### Explain what to do if you want to monitor your web server QPS

To monitor your web server's Queries Per Second (QPS), you would configure the monitoring agent on Server 2 and Server 3 to parse the **Nginx access log**. Each line in this log file represents one request and is timestamped. The agent would be set up to:
1.  Read the access log file in real-time.
2.  Count the number of lines (requests) that appear within each one-second interval.
3.  Send this count as a metric named something like `nginx.requests_per_second` to the central monitoring service.
You could then build a dashboard in your monitoring service to graph this metric over time.

### Remaining Issues with this Infrastructure

Even this more robust design has its own set of trade-offs and potential problems:

*   **Why terminating SSL at the load balancer level is an issue:** In this design, the traffic between the user and the load balancer is encrypted (HTTPS). However, the load balancer decrypts the traffic and forwards it to the web servers as unencrypted HTTP. This means the traffic inside your private network is in plain text. If an attacker manages to breach your network perimeter, they could position themselves between the load balancer and the application servers and read all internal traffic, including sensitive user data. This is often called a "man-in-the-middle" attack within your own infrastructure.
*   **Why having only one MySQL server capable of accepting writes is an issue:** This remains a Single Point of Failure (SPOF) for data modification. While the website can still serve read requests from the Replica if the Primary database fails, any functionality that requires writing data—such as user registration, submitting a form, or making a purchase—will be completely unavailable. The site becomes partially non-functional until the Primary database is recovered or a failover to a new Primary is manually performed.
*   **Why having servers with all the same components might be a problem:** This is an issue of **resource contention** and inefficient scaling. The web/application server is typically CPU and memory-intensive, while the database server is often disk I/O intensive. By running both on the same machine, a spike in web traffic that consumes all the CPU could starve the database process, causing it to slow down drastically, and vice-versa. It also creates an inflexible scaling model. If you need more database power, you are forced to deploy a whole new server with a web and application server you may not need, which is wasteful. Separating these components onto their own dedicated servers is a more specialized and efficient approach.